diff -r d3612c7f9d7b geom/lib/libgeom.h
--- a/geom/lib/libgeom.h	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/lib/libgeom.h	Mon Apr 18 15:27:04 2016 +0200
@@ -90,6 +90,9 @@
 9 = MULTILINESTRING
 10 = MULTISURFACE
 11 = MULTIPOLYGON
+15 = POLYEHDRALSURFACE
+16 = TIN / TRIANGULATEDSURFACE
+17 = TRIANGLE
 
 */
 
@@ -102,7 +105,10 @@
 	wkbMultiPoint_mdb = 5,
 	wkbMultiLineString_mdb = 6,
 	wkbMultiPolygon_mdb = 7,
-	wkbGeometryCollection_mdb = 8
+	wkbGeometryCollection_mdb = 8,
+	wkbPolyehdralSurface_mdb = 15,
+	wkbTin_mdb = 16, //TriangulatedSurface
+	wkbTriangle_mdb = 17
 } wkb_type;
 
 libgeom_export const char *geom_type2str(int t, int flag);
diff -r d3612c7f9d7b geom/monetdb5/Makefile.ag
--- a/geom/monetdb5/Makefile.ag	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/Makefile.ag	Mon Apr 18 15:27:04 2016 +0200
@@ -16,7 +16,7 @@
 lib__geom = {
 	MODULE
 	DIR = libdir/monetdb5
-	SOURCES = geom.h geom.c geomBulk.c geom_upgrade.c
+	SOURCES = geom.h geom.c geomBulk.c geom_upgrade.c geom_export.h geom_geojson.c geom_x3d.c
 	LIBS = ../lib/libgeom \
 		   ../../gdk/libbat \
 	       ../../common/stream/libstream \
@@ -40,7 +40,7 @@
 	COND = HAVE_SFCGAL
 	MODULE
 	DIR = libdir/monetdb5
-	SOURCES = sfcgal.h sfcgal.c
+	SOURCES = sfcgal.h sfcgal.c geom_sfcgal.h geom_sfcgal.c
 	LIBS = ../lib/libgeom \
 		   ../../gdk/libbat \
 	       ../../common/stream/libstream \
diff -r d3612c7f9d7b geom/monetdb5/geom.c
--- a/geom/monetdb5/geom.c	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/geom.c	Mon Apr 18 15:27:04 2016 +0200
@@ -12,6 +12,7 @@
  */
 
 #include "geom.h"
+#include "geom_export.h"
 
 int TYPE_mbr;
 
@@ -1801,6 +1802,53 @@
 	return MAL_SUCCEED;
 }
 
+str wkbPolygonize(wkb** outWKB, wkb** geom){
+	GEOSGeom geosGeometry = wkb2geos(*geom);
+	int i = 0, geometriesNum = GEOSGetNumGeometries(geosGeometry);
+	GEOSGeometry* outGeometry;
+	const GEOSGeometry **multiGeometry;
+
+	multiGeometry = malloc(sizeof(GEOSGeometry*) * geometriesNum);
+	for(i=0; i<geometriesNum; i++) {
+		multiGeometry[i] = GEOSGetGeometryN(geosGeometry, i);
+	}
+
+	if(!(outGeometry = GEOSPolygonize(multiGeometry, geometriesNum))) {
+		*outWKB = NULL;
+		for (i = 0; i < geometriesNum; i++) {
+			GEOSGeom_destroy((GEOSGeometry *)multiGeometry[i]);
+		}
+		return createException(MAL, "geom.Polygonize", "GEOSPolygonize failed");
+	}
+
+	for (i = 0; i < geometriesNum; i++) {
+		GEOSGeom_destroy((GEOSGeometry *)multiGeometry[i]);
+	}
+
+	*outWKB = geos2wkb(outGeometry);
+	GEOSGeom_destroy(outGeometry);
+
+	return MAL_SUCCEED;
+}
+
+str wkbSimplifyPreserveTopology(wkb** outWKB, wkb** geom, float* tolerance){
+	GEOSGeom geosGeometry = wkb2geos(*geom);
+	GEOSGeometry* outGeometry;
+
+	if(!(outGeometry = GEOSTopologyPreserveSimplify(geosGeometry, *tolerance))) {
+		*outWKB = NULL;
+		GEOSGeom_destroy(geosGeometry);
+		return createException(MAL, "geom.SimplifyPreserveTopology", "GEOSSimplifyPreserveTopology failed");
+	}
+
+	GEOSGeom_destroy(geosGeometry);
+
+	*outWKB = geos2wkb(outGeometry);
+	GEOSGeom_destroy(outGeometry);
+
+	return MAL_SUCCEED;
+}
+
 str geom_2_geom(wkb** resWKB, wkb **valueWKB, int* columnType, int* columnSRID) {
 	GEOSGeom geosGeometry;
 	int geoCoordinatesNum = 2;
@@ -4347,6 +4395,57 @@
 	return MAL_SUCCEED;
 }
 
+#if 0
+str wkbBox3D(mbr** box, wkb** point1, wkb** point2) {
+    GEOSGeom point1_geom, point2_geom;
+    double xmin=0.0, ymin=0.0, zmin=0.0, xmax=0.0, ymax=0.0, zmax=0.0;
+
+    if(wkb_isnil(*point1) || wkb_isnil(*point2)) {
+        *box=mbr_nil;
+        return MAL_SUCCEED;
+    }
+
+    point1_geom = wkb2geos(*point1);
+    if((GEOSGeomTypeId(point1_geom)+1) != wkbPoint_mdb) {
+        GEOSGeom_destroy(point1_geom);
+        *box = mbr_nil;
+        throw(MAL, "geom.MakeBox3D", "Geometries should be points");
+    }
+
+    point2_geom = wkb2geos(*point2);
+    if((GEOSGeomTypeId(point2_geom)+1) != wkbPoint_mdb) {
+        GEOSGeom_destroy(point1_geom);
+        GEOSGeom_destroy(point2_geom);
+        *box = mbr_nil;
+        throw(MAL, "geom.MakeBox3D", "Geometries should be points");
+    }
+
+    if(GEOSGeomGetX(point1_geom, &xmin) == -1 ||
+       GEOSGeomGetY(point1_geom, &ymin) == -1 ||
+       GEOSGeomGetY(point1_geom, &zmin) == -1 ||
+       GEOSGeomGetX(point2_geom, &xmax) == -1 ||
+       GEOSGeomGetY(point2_geom, &ymax) == -1 ||
+       GEOSGeomGetY(point2_geom, &zmax) == -1) {
+
+        GEOSGeom_destroy(point1_geom);
+        GEOSGeom_destroy(point2_geom);
+        *box = mbr_nil;
+        throw(MAL, "geom.MakeBox3D", "Error in reading the points' coordinates");
+
+    }
+
+    *box = (mbr*) GDKmalloc(sizeof(mbr));
+    (*box)->xmin = (float) (xmin < xmax ? xmin : xmax);
+    (*box)->ymin = (float) (ymin < ymax ? ymin : ymax);
+    (*box)->zmin = (float) (zmin < zmax ? zmin : zmax);
+    (*box)->xmax = (float) (xmax > xmin ? xmax : xmin);
+    (*box)->ymax = (float) (ymax > ymin ? ymax : ymin);
+    (*box)->zmax = (float) (zmax > zmin ? zmax : zmin);
+
+    return MAL_SUCCEED;
+}
+#endif
+
 /*returns true if the two
  * 	mbrs overlap */
 str mbrOverlaps(bit *out, mbr **b1, mbr **b2) {
@@ -5689,3 +5788,23 @@
 	*out = TRUE;
 	return MAL_SUCCEED;
 }
+
+/* Exported from PostGIS */
+str
+wkbAsX3D(str *res, wkb **geom, int maxDecDigits, int options)
+{
+	(void) geom;
+	(void) maxDecDigits;
+	(void) options;
+	*res = "";
+	return MAL_SUCCEED;
+}
+
+str
+wkbAsGeoJson(str *res, wkb **geomWBK, int maxDecDigits, int options)
+{
+	GEOSGeom geom = wkb2geos(*geomWBK);
+	char *srs = NULL;
+	*res = geom_to_geojson(geom, srs, maxDecDigits, options);
+	return MAL_SUCCEED;
+}
diff -r d3612c7f9d7b geom/monetdb5/geom.h
--- a/geom/monetdb5/geom.h	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/geom.h	Mon Apr 18 15:27:04 2016 +0200
@@ -226,6 +226,8 @@
 
 geom_export str wkbDump(bat* idBAT_id, bat* geomBAT_id, wkb**);
 geom_export str wkbDumpPoints(bat* idBAT_id, bat* geomBAT_id, wkb**);
+geom_export str wkbPolygonize(wkb **res, wkb **geom);
+geom_export str wkbSimplifyPreserveTopology(wkb **res, wkb **geom, float *tolerance);
 
 geom_export str geom_2_geom(wkb** resWKB, wkb **valueWKB, int* columnType, int* columnSRID); 
 
@@ -294,3 +296,7 @@
 
 geom_export int geom_catalog_upgrade(void *, int);
 geom_export str geom_sql_upgrade(int);
+
+/* Exported from PostGIS */
+geom_export str wkbAsX3D(str *res, wkb **geom, int maxDecDigits, int options);
+geom_export str wkbAsGeoJson(str *res, wkb **geom, int maxDecDigits, int options);
diff -r d3612c7f9d7b geom/monetdb5/geom.mal
--- a/geom/monetdb5/geom.mal	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/geom.mal	Mon Apr 18 15:27:04 2016 +0200
@@ -334,6 +334,10 @@
 comment "Gets a MultiPolygon and returns the Polygons in it";
 command DumpPoints(a:wkb) (id:bat[:oid, :str], geom:bat[:oid, :wkb]) address wkbDumpPoints
 comment "Gets a Geometry and returns the Points in it";
+command Polygonize(a:wkb) :wkb address wkbPolygonize
+comment "Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.";
+command SimplifyPreserveTopology(a:wkb, t:flt) :wkb address wkbSimplifyPreserveTopology
+comment "Returns a \"simplified\" version of the given geometry using the Douglas-Peucker algorithm.";
 
 command Segmentize(g:wkb, sz:dbl) :wkb address wkbSegmentize
 comment "It creates a new geometry with all segments on it smaller or equal to sz";
@@ -512,6 +516,16 @@
 	return x;
 end YMaxFromMBR;
 
+#SFCGDAL functionality
+command Extrude(a:wkb, ex:dbl, ey:dbl, ez:dbl) :wkb address wkbExtrude
+comment "Extrude a surface to a related volume.";
+
+command StraightSkeleton(a:wkb) :wkb address wkbStraightSkeleton
+comment "Compute a straight skeleton from a geometry";
+
+command ST_Tesselate(a:wkb) :wkb address wkbTesselate
+comment "Perform surface Tesselation of a polygon or polyhedralsurface and returns as a TIN or collection of TINS.";
+
 
 #command mbr(:flt,:flt,:flt,:flt) :mbr
 #address ordinatesMBR
@@ -789,3 +803,10 @@
         x := geom.FromText(wkt,0,0);
         return x;
 end wkb;
+
+#Exported from PostGis
+command asX3D(geom:wkb, maxDecDigits:int, options:int) :str address wkbAsX3D;
+comment "Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML"
+
+command asGeoJson(geom:wkb, maxDecDigits:int, options:int) :str address wkbAsGeoJson;
+comment "Return the geometry as a GeoJSON element."
diff -r d3612c7f9d7b geom/monetdb5/sfcgal.c
--- a/geom/monetdb5/sfcgal.c	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/sfcgal.c	Mon Apr 18 15:27:04 2016 +0200
@@ -12,6 +12,7 @@
  */
 
 #include "sfcgal.h"
+#include "geom_sfcgal.h"
 
 char *
 geom_sfcgal_version(char **ret)
@@ -20,3 +21,72 @@
 
 	return MAL_SUCCEED;
 }
+
+/* SFCGDAL functionality */
+str
+geom_sfcgal_extrude(wkb **res, wkb **geom, double *ex, double *ey, double *ez)
+{
+	sfcgal_geometry_t *outGeom, *inGeom;
+	GEOSGeom geosGeometry = wkb2geos(*geom);
+	size_t len;
+	char *buf; //[BUFSIZ];
+
+	if (geos2sfcgal(&inGeom, geosGeometry) != MAL_SUCCEED) {
+		*res = NULL;
+		return createException(MAL, "geom.Extrude", "GEOSExtrude failed");
+	}
+	if (!(outGeom = sfcgal_geometry_extrude (inGeom, *ex, *ey, *ez))) {
+		*res = NULL;
+		return createException(MAL, "geom.Extrude", "GEOSExtrude failed");
+	}
+
+	sfcgal_geometry_as_text(outGeom, &buf, &len);
+	*res = geos2wkb(GEOSGeomFromWKT(buf));
+	return MAL_SUCCEED;
+}
+
+str
+geom_sfcgal_straightSkeleton(wkb **res, wkb **geom)
+{
+	sfcgal_geometry_t *outGeom, *inGeom;
+	GEOSGeom geosGeometry = wkb2geos(*geom);
+	size_t len;
+	char *buf; //[BUFSIZ];
+
+	if (geos2sfcgal(&inGeom, geosGeometry) != MAL_SUCCEED) {
+		*res = NULL;
+		return createException(MAL, "geom.StraightSkeleton", "GEOSStraightSkeleton failed");
+	}
+	if (!(outGeom = sfcgal_geometry_straight_skeleton(inGeom))) {
+		*res = NULL;
+		return createException(MAL, "geom.StraightSkeleton", "GEOSStraightSkeleton failed");
+	}
+
+	sfcgal_geometry_as_text(outGeom, &buf, &len);
+	*res = geos2wkb(GEOSGeomFromWKT(buf));
+	return MAL_SUCCEED;
+}
+
+str
+geom_sfcgal_tesselate(wkb **res, wkb **geom)
+{
+	sfcgal_geometry_t *outGeom, *inGeom;
+	GEOSGeom geosGeometry = wkb2geos(*geom);
+	size_t len;
+	char *buf; //[BUFSIZ];
+
+	if (geos2sfcgal(&inGeom, geosGeometry) != MAL_SUCCEED) {
+		*res = NULL;
+		return createException(MAL, "geom.Tesselate", "GEOSTesselate failed");
+	}
+	if (!(outGeom = sfcgal_geometry_tesselate(inGeom))) {
+		*res = NULL;
+		return createException(MAL, "geom.Tesselate", "GEOSTesselate failed");
+	}
+
+	sfcgal_geometry_as_text(outGeom, &buf, &len);
+	*res = geos2wkb(GEOSGeomFromWKT(buf));
+	return MAL_SUCCEED;
+}
+
+
diff -r d3612c7f9d7b geom/monetdb5/sfcgal.h
--- a/geom/monetdb5/sfcgal.h	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/sfcgal.h	Mon Apr 18 15:27:04 2016 +0200
@@ -39,3 +39,7 @@
 #endif
 
 geom_export char * geom_sfcgal_version(char **ret);
+geom_export str geom_sfcgal_extrude(wkb **res, wkb **geom, double *ex, double *ey, double *ez);
+geom_export str geom_sfcgal_straightSkeleton(wkb **res, wkb **geom);
+geom_export str geom_sfcgal_tesselate(wkb **res, wkb **geom);
+
diff -r d3612c7f9d7b geom/monetdb5/sfcgal.mal
--- a/geom/monetdb5/sfcgal.mal	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/monetdb5/sfcgal.mal	Mon Apr 18 15:27:04 2016 +0200
@@ -9,3 +9,12 @@
 command version() :str address geom_sfcgal_version
 comment "Returns the version number of the SFCGAL library";
 
+command extrude(geo:wkb, x:dbl, y:dbl, z:dbl) : wkb address geom_sfcgal_extrude
+comment "Extrude a surface to a related volume"
+
+command straightSkeletion(geo:wkb) : wkb address geom_sfcgal_straightSkeleton
+comment "Compute a straight skeleton from a geometry"
+
+command tesselate(geo:wkb) : wkb address geom_sfcgal_tesselate
+commnet "Perform surface Tesselation of a polygon or polyhedralsurface and returns as a TIN or collection of TINS"
+
diff -r d3612c7f9d7b geom/sql/40_geom.sql
--- a/geom/sql/40_geom.sql	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/sql/40_geom.sql	Mon Apr 18 15:27:04 2016 +0200
@@ -4372,14 +4372,14 @@
 --CREATE FUNCTION ST_MakeValid RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_MemUnion RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_MinimumBoundingCircle RETURNS EXTERNAL NAME
---CREATE FUNCTION ST_Polygonize RETURNS EXTERNAL NAME
+CREATE FUNCTION ST_Polygonize(gemo1 Geometry) RETURNS Geometry EXTERNAL NAME geom."Polygonize";
 --CREATE FUNCTION ST_Node RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_OffsetCurve RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_RemoveRepeatedPoints RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_SharedPaths RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_Shift_Longitude RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_Simplify RETURNS EXTERNAL NAME
---CREATE FUNCTION ST_SimplifyPreserveTopology RETURNS EXTERNAL NAME
+CREATE FUNCTION ST_SimplifyPreserveTopology(geom1 Geometry, tolerance real) RETURNS Geometry EXTERNAL NAME geom."SimplifyPreserveTopology";
 --CREATE FUNCTION ST_Split RETURNS EXTERNAL NAME
 --CREATE FUNCTION ST_Union(geometry set geoms)?????
 --CREATE FUNCTION ST_UnaryUnion RETURNS EXTERNAL NAME
@@ -4456,3 +4456,5 @@
 ---------------------------- Miscellaneous ------------------------------
 -------------------------------------------------------------------------
 CREATE FUNCTION Contains(a Geometry, x double, y double) RETURNS BOOLEAN external name geom."Contains";
+CREATE FUNCTION ST_AsX3D(a Geometry, maxDecDigits int, options int) returns string external name geom."asX3D";
+CREATE FUNCTION ST_AsGeoJson(a Geometry, maxDecDigits int, options int) returns string external name geom."asGeoJson";
diff -r d3612c7f9d7b geom/sql/41_sfcgal.sql
--- a/geom/sql/41_sfcgal.sql	Tue Apr 12 01:30:53 2016 +0200
+++ b/geom/sql/41_sfcgal.sql	Mon Apr 18 15:27:04 2016 +0200
@@ -5,3 +5,7 @@
 -- Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.
 
 CREATE FUNCTION SFCGAL_VERSION() RETURNS string EXTERNAL NAME sfcgal."version";
+CREATE FUNCTION geometry ST_Extrude(geometry geom, double x, double y, double z) RETURNS geometry EXTERNAL NAME geom."extrude";
+CREATE FUNCTION geometry ST_StraightSkeleton(geometry geom) RETURNS geometry EXTERNAL NAME geom."straightSkeleton";
+CREATE FUNCTION geometry ST_Tesselate(geometry geom) RETURNS geometry EXTERNAL NAME geom."tesselate";
+--CREATE FUNCTION geometry ST_Triangulate2DZ(geometry geom) RETURNS geometry EXTERNAL NAME geom."Triangulate2DZ";;
